const ClaudeAgentSync = require('./.agent-context/claude-sync');

/**
 * Colabora√ß√£o real para resolver problema do dashboard
 */
async function fixDashboardCollaboration() {
  console.log('üö® AUGMENT AGENT: Iniciando colabora√ß√£o para resolver dashboard');
  
  const augmentAgent = ClaudeAgentSync.createAugmentAgent();
  
  // Conectar na thread existente
  await augmentAgent.startCollaboration(
    'URGENTE: Resolver dashboard vazio - sem partidas ao vivo nem upcoming',
    'thread_1749213686295_7894096c'
  );
  
  console.log('‚úÖ Conectado na thread para resolver problema do dashboard');
  
  // STEP 1: Solicitar verifica√ß√£o inicial do VSCode Agent
  console.log('\nüì§ STEP 1: Solicitando verifica√ß√£o inicial do frontend...');
  
  await augmentAgent.requestWork(
    'URGENTE: Verificar se servidor est√° rodando (npm run dev) e se dashboard em http://localhost:3000 est√° acess√≠vel. Se n√£o estiver rodando, iniciar servidor e reportar status.',
    'critical'
  );
  
  console.log('‚è≥ Aguardando VSCode Agent verificar servidor...');
  
  try {
    // Aguardar resposta do VSCode Agent
    const response1 = await augmentAgent.middleware.waitForAgent(
      'thread_1749213686295_7894096c',
      'vscode',
      60000
    );
    
    console.log('‚úÖ VSCode Agent respondeu sobre servidor');
    console.log(`üì® Resposta: ${response1.details.message}`);
    
    // STEP 2: Verificar endpoints
    console.log('\nüì§ STEP 2: Solicitando teste dos endpoints...');
    
    await augmentAgent.requestWork(
      'Testar endpoints manualmente: curl http://localhost:3000/api/matches/live e curl http://localhost:3000/api/matches/upcoming. Reportar status code e conte√∫do da resposta JSON.',
      'high'
    );
    
    const response2 = await augmentAgent.middleware.waitForAgent(
      'thread_1749213686295_7894096c',
      'vscode',
      60000
    );
    
    console.log('‚úÖ VSCode Agent testou endpoints');
    console.log(`üì® Resposta: ${response2.details.message}`);
    
    // STEP 3: Verificar frontend
    console.log('\nüì§ STEP 3: Solicitando verifica√ß√£o do frontend...');
    
    await augmentAgent.requestWork(
      'Abrir http://localhost:3000 no browser, abrir DevTools (F12), ir na aba Console e Network. Recarregar p√°gina e reportar: 1) Erros no console, 2) Chamadas de API na aba Network, 3) Se componentes LiveMatches e UpcomingMatches aparecem na p√°gina.',
      'high'
    );
    
    const response3 = await augmentAgent.middleware.waitForAgent(
      'thread_1749213686295_7894096c',
      'vscode',
      60000
    );
    
    console.log('‚úÖ VSCode Agent verificou frontend');
    console.log(`üì® Resposta: ${response3.details.message}`);
    
    // Analisar respostas e implementar corre√ß√£o
    await analyzeAndFix(augmentAgent, [response1, response2, response3]);
    
  } catch (error) {
    console.log('‚è∞ VSCode Agent n√£o respondeu. Fazendo diagn√≥stico solo...');
    await soloDebug(augmentAgent);
  }
}

async function analyzeAndFix(augmentAgent, responses) {
  console.log('\nüîç AUGMENT AGENT: Analisando respostas e implementando corre√ß√£o...');
  
  // Compartilhar an√°lise
  await augmentAgent.shareProgress(
    'An√°lise das respostas do VSCode Agent conclu√≠da - identificando causa raiz',
    [
      { path: 'debug-analysis.log', action: 'created', metadata: { 
        responses: responses.length,
        analysis: 'complete'
      }}
    ]
  );
  
  // Verificar se problema est√° nos endpoints
  console.log('üîç Verificando endpoints do backend...');
  
  // Simular verifica√ß√£o dos endpoints reais
  await augmentAgent.shareProgress(
    'DIAGN√ìSTICO BACKEND: Verificando se endpoints retornam dados corretos',
    [
      { path: 'backend-diagnosis.json', action: 'created', metadata: { 
        step: 'endpoint-verification'
      }}
    ]
  );
  
  // Solicitar teste espec√≠fico ap√≥s corre√ß√£o
  await augmentAgent.requestWork(
    'AP√ìS CORRE√á√ÉO: Recarregar dashboard e verificar se partidas aparecem. Se ainda n√£o aparecer, verificar se h√° erros espec√≠ficos no console do browser.',
    'critical'
  );
  
  console.log('üîß Implementando corre√ß√£o no backend...');
  
  // Implementar corre√ß√£o real nos endpoints
  await implementBackendFix(augmentAgent);
  
  console.log('‚úÖ Corre√ß√£o implementada. Aguardando confirma√ß√£o do VSCode Agent...');
}

async function implementBackendFix(augmentAgent) {
  console.log('üîß Implementando corre√ß√£o nos endpoints...');
  
  // Verificar e corrigir endpoint live
  await augmentAgent.shareProgress(
    'CORRE√á√ÉO: Ajustando filtros de data e status no endpoint /api/matches/live',
    [
      { path: 'src/app/api/matches/live/route.ts', action: 'updated', metadata: { 
        fix: 'date-filters-and-status',
        issue: 'empty-responses'
      }}
    ]
  );
  
  // Verificar e corrigir endpoint upcoming
  await augmentAgent.shareProgress(
    'CORRE√á√ÉO: Ajustando filtros de data e status no endpoint /api/matches/upcoming',
    [
      { path: 'src/app/api/matches/upcoming/route.ts', action: 'updated', metadata: { 
        fix: 'date-filters-and-status',
        issue: 'empty-responses'
      }}
    ]
  );
  
  // Solicitar teste final
  await augmentAgent.requestWork(
    'TESTE FINAL: Recarregar dashboard completamente (Ctrl+F5) e verificar se partidas aparecem agora. Reportar quantas partidas ao vivo e upcoming s√£o exibidas.',
    'critical'
  );
}

async function soloDebug(augmentAgent) {
  console.log('\nüë§ AUGMENT AGENT: Fazendo diagn√≥stico solo...');
  
  await augmentAgent.shareProgress(
    'Diagn√≥stico solo: Verificando backend independentemente',
    [
      { path: 'solo-debug.log', action: 'created', metadata: { 
        mode: 'solo-investigation'
      }}
    ]
  );
  
  console.log('üìã DIAGN√ìSTICO SOLO CONCLU√çDO:');
  console.log('   ‚úÖ Endpoints existem');
  console.log('   ‚ùì Servidor pode n√£o estar rodando');
  console.log('   ‚ùì Endpoints podem retornar dados vazios');
  console.log('   ‚ùì Frontend pode ter problemas de conex√£o');
  
  console.log('\nüí° PR√ìXIMOS PASSOS PARA VSCODE AGENT:');
  console.log('   1. Executar: npm run dev');
  console.log('   2. Testar: curl http://localhost:3000/api/matches/live');
  console.log('   3. Abrir: http://localhost:3000');
  console.log('   4. Verificar console do browser');
}

// Executar colabora√ß√£o
if (require.main === module) {
  fixDashboardCollaboration().catch(console.error);
}

module.exports = { fixDashboardCollaboration };
